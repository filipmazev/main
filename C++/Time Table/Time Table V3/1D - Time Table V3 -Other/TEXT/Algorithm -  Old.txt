int digits(long_double_t x)
{
    stringstream sso;
    sso<< abs( x - (long long int)x );
    string num;
    sso>>num;
    long long int result = num.length()-2;
    return result;
}

int digits2(long long int x2)
{
    long long int digit = 1;
    while (x2 >= 0){
    digit *= 10;
    x2 -= 1;}
    return digit;
}

    dMain = sum; long long int days1 = sum * digits2(digits(sum));
        long_double_t days2 = days1 % digits2(digits(sum));
            long_double_t days3 = days2 / digits2(digits(sum));
                long_double_t hours = days3 * 24; hMain = hours;

        long long int hours1 = hours * digits2(digits(hours));
            long_double_t hours2 = hours1 % digits2(digits(hours));
                long_double_t hours3 = hours2 / digits2(digits(hours));
                    long_double_t minutes = hours3 * 60; mMain = minutes;

            long long int minutes1 = minutes * digits2(digits(minutes));
                long_double_t minutes2 = minutes1 % digits2(digits(minutes));
                    long_double_t minutes3 = minutes2 / digits2(digits(minutes));
                        long_double_t seconds = minutes3 * 60; sMain = seconds;

                long long int seconds1 = seconds * digits2(digits(seconds));
                    long_double_t seconds2 = seconds1 % digits2(digits(seconds));
                        long_double_t seconds3 = seconds2 / digits2(digits(seconds));
                            long_double_t milliseconds = seconds3 * 1000;
                                mlsMain = milliseconds;

            if (chs == 1 && sumOriginal == ceil(seconds)){ sMain = ceil(seconds); mlsMain = 0;}
                if (chs == 2 && sumOriginal == ceil(minutes)){ mMain = ceil(minutes); sMain = 0; mlsMain = 0;}
                    if (chs == 3 && sumOriginal == ceil(hours)){ hMain = ceil(hours); mMain = 0; sMain = 0; mlsMain = 0;}